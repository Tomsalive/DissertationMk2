<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
  	<meta http-equiv="X-UA-Compatible" content="IE=edge">
  	<meta name="viewport" content="width=device-width, initial-scale=1.0">
  	<title>Home</title>
	<style type="text/css">
		/* Header and Navigation Styles */
		.full-width-header {
		background-color: #333;
		color: #fff;
		padding: 10px 0;
		width: 100%;
		position: fixed;
		top: 0;
		left: 0;
		z-index: 10;
		}

		nav {
		display: flex;
		justify-content: space-between;
		align-items: center;
		max-width: 1200px;
		margin: 0 auto;
		}

		.logo {
		flex-grow: 1;
		}

		.logo a {
		font-size: 24px;
		font-weight: bold;
		color: #fff;
		text-decoration: none;
		}

		nav ul {
		list-style-type: none;
		margin: 0;
		padding: 0;
		display: flex;
		}

		nav ul li {
		margin-left: 20px;
		}

		.nav-btn {
		color: #fff;
		text-decoration: none;
		font-size: 16px;
		padding: 10px 15px;
		background-color: transparent;
		border: none;
		cursor: pointer;
		}

		.nav-btn:hover {
		background-color: #555;
		}
		
		/*Search Bar style*/

		.search-container {
		display: flex;
		justify-content: center;
		margin-top: 80px;
		}

		.search-input {
		width: 300px;
		padding: 10px;
		font-size: 16px;
		border: 1px solid #ccc;
		border-radius: 4px;
		}

		/* Map Styles */
		#map {
		height: 450px;
		width: 1000px;
		margin-top: 20px;
		margin-left: auto;
		margin-right: auto;
		display: block;
		}

		.review-list {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		grid-gap: 20px;
		padding: 20px;
		}

		.review-item {
		background-color: #f1f1f1;
		padding: 20px;
		border-radius: 5px;
		box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
		display: flex;
		align-items: center;
		}

		.review-item .review-content {
		flex-grow: 1;
		}

		.review-item .review-button {
		margin-right: 20px;
		background-color: #4CAF50;
		color: white;
		border: none;
		padding: 10px 20px;
		text-align: center;
		text-decoration: none;
		display: inline-block;
		font-size: 16px;
		border-radius: 4px;
		cursor: pointer;
		}

		/*stars*/
		.star-rating {
		display: flex;
		align-items: center;
		color: #ccc;
		font-size: 20px;
		}

		.star-rating .star {
		margin-right: 5px;
		}

		.star-rating .star.active {
		color: #ffd700;
		}
	</style>
</head>

<body>
	<header class="full-width-header">
		<nav>
		  <div class="logo">
			<a href="">WS Housing Reviewer</a>
		  </div>
		  <ul>
			<%# <li><button type="button" class="nav-btn">About</button></li> %>
			<li><button type="button" class="nav-btn" onclick="window.location.href='/reviews'">All Reviews</button></li>
			<li>
			  <form action="/logout?_method=DELETE" method="POST">
				<button type="submit" class="nav-btn">Log Out</button>
			  </form>
			</li>
		  </ul>
		</nav>
	</header>

	<div class="search-container">
		<input type="text" placeholder="Search..." class="search-input" id="search-input" onkeydown="handleKeydown(event)">
		<button type="button" class="search-button" onclick="searchAddress()">Search</button>
	</div>

	<!--The div element for the map -->
	<div id="map"></div>

	<h1>Recent Reviews</h1>
	<% if (reviews.length > 0) { %>
	  <div class="review-list">
		<% reviews.forEach(review => { %>
			<div class="review-item">
				<a href="/reviews/<%= review._id %>" class="review-button">View</a>
				<div class="review-content">
				<h2><%= review.title %></h2>
				<p><%= review.address %></p>
				<input type="hidden" id="coordinate" name="coordinate" value=<%= review.coordinate %>>
				<div class="star-rating">
					<% const numStars = parseInt(review.stars, 10); %>
					<% for (let i = 0; i < numStars; i++) { %>
					<span class="star active">&#9733;</span>
					<% } %>
					<% for (let i = numStars; i < 5; i++) { %>
					<span class="star">&#9733;</span>
					<% } %>
					<span>(<%= review.stars %>)
				</div>
				</div>
			</div>
		<% }) %>
	  </div>
	<% } else { %>
	  <p>No reviews found.</p>
	<% } %>

	<!--Add a script by google -->
	<script 
	src= "https://maps.googleapis.com/maps/api/js?key=<%= process.env.API_KEY || 'Invalid or No API Key' %>&callback=initMap&libraries=&v=weekly" async>
	</script>
	<script>
		let map;
		let marker;

		function initMap() {
			const winchester_city = {
				lat: 51.063696,
				lng: -1.319273
			};

			map = new google.maps.Map(document.getElementById('map'), {
				zoom: 13,
				center: winchester_city
			});

			placeReviewMarkers();

		}

		function placeReviewMarkers() {
			const reviewElements = document.querySelectorAll('#coordinate');
			reviewElements.forEach(element => {
				const coordinateString = element.value;
				placepoint(coordinateString);
			});
		}

        function searchAddress() {
			const searchInput = document.getElementById("search-input");
			let address = searchInput.value.trim();
			if (address === "") {
				initMap()
			} else{
				const geocoder = new google.maps.Geocoder();

				geocoder.geocode({ address: address }, (results, status) => {
					if (status === "OK") {
						const location = results[0].geometry.location;
						console.log(location)
						const latitude = location.lat();
						const longitude = location.lng();

						///clearMarkers();

						map.setCenter(location);
						map.setZoom(18);
						//addMarker(location);
					} else {
						alert("Geocode was not successful for the following reason: " + status);
					}
				}); 
			}
    	}

        function handleKeydown(event) {
            if (event.key === 'Enter') {
                searchAddress();
            }
        }


		function clearMarkers() {
		if (marker) {
			marker.setMap(null);
		}
		}

		function placepoint(coordinateString) {
		if (typeof coordinateString === 'string' && coordinateString.includes(',')) {
			const [latitude, longitude] = coordinateString.split(',');
			const formattedCoordinate = {
			lat: parseFloat(latitude.trim()),
			lng: parseFloat(longitude.trim())
			};
			addMarker(formattedCoordinate);
		}
		}

		function addMarker(location) {
		const newMarker = new google.maps.Marker({
			position: location,
			map: map,
			title: "test"
		});
		}
    </script>



</body>

</html>
